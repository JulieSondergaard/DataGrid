@page "/fileupload"
@using Microsoft.Extensions.Logging
@inject ILogger<File> Logger
@inject Blazored.LocalStorage.ILocalStorageService localStorage

	

<PageTitle>File Upload</PageTitle>

<h3>File Upload</h3>

<p>
	<label>
		Upload:
		<InputFile OnChange="@LoadFile" />
	</label>
</p>



<MatTable Items="@files" AllowSelection="true"  >
	<MatTableHeader>
		<th>Image</th>
		<th>Name</th>
		<th>Size</th>
		<th>Type</th>

	</MatTableHeader>
	<MatTableRow>
		<td> 
			<MatButton id="btn_img" OnClick="@OpenDialog" Raised="true">
				<img alt="" src="@context.Base64Data" style="text-align:center;width:100%" />
			</MatButton>

		</td>
		<td> @context.Name </td>
		<td> @context.Size </td>
		<td> @context.Type </td>
	</MatTableRow>


</MatTable>

<MatDialog @bind-IsOpen="@dialogIsOpen">
	<MatDialogContent>
                <p>Change file name to:</p>

		<MatTextField @bind-Value="@newName"></MatTextField>

			<p>Info</p>
			<MatSelect TValue="string" Label="Size">

				<p></p>
			
			</MatSelect>
			<MatSelect TValue="string" Label="Type">
			<MatOptionString Value=""></MatOptionString>
			</MatSelect>
			

		<MatDialogActions>
			<MatButton OnClick="@(e => { dialogIsOpen = false; })">No Thanks</MatButton>
			<MatButton OnClick="@OkClick">OK</MatButton>
		</MatDialogActions>

	</MatDialogContent>
</MatDialog>






@code {

	bool dialogIsOpen = false;
	File newFile = new();
	private string newName = "";
//	private File selectedFile = new();
	private List<File> files = new List<File>();

	private int maxAllowedFiles = 3;



	void OpenDialog()
	{

		dialogIsOpen = true;
	}

	void OkClick()
	{

		dialogIsOpen = false;
	}

	private async Task LoadFile(InputFileChangeEventArgs e)
	{

		foreach (var file in e.GetMultipleFiles())
		{
			try
			{

				var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file

				var buffer = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data

				using (var stream = resizedFile.OpenReadStream())
				{
					await stream.ReadAsync(buffer); // copy the stream to the buffer
				}


				File newFile = new File(file.Name, "data:image/png;base64," + Convert.ToBase64String(buffer), file.ContentType, file.Size);


				files.Add(newFile);

			}
			catch (Exception ex)
			{
				Logger.LogError("File: {Filename} Error: {Error}",
					file.Name, ex.Message);
			}
		}
	}

	
	private async Task saveInLocalStorage()
	{	
		await localStorage.SetItemAsync("name", newFile.Name);
	}


}
